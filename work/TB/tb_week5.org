
* 测试与评估

  
  1. 回测

     - 回测速度快

     - 与实际运行很大区别

  2. 模拟盘

     - 冲击成本无法模拟 -- 什么是冲击成本？ 譬如卖盘挂了 10 单，买盘挂了 20 单，那么吃掉 10 单后，卖盘
       价格肯定会再涨。

     - 如果是日线级别的策略，模拟盘运行需要时间长，很可能需要几个月时间

     - 很可能模拟盘运行的时候，行情处于单一行情

  3. 测试设置

     1. 商品设置

        - 样本 --> 范围

          + 注意：夜盘按道理是第二天的行情，但是如果设置样本范围是 1 天的时候，是没有夜盘数据的

        - 属性
          
          + 最小变动：一跳

          + 交易单位：每一手交易多少单位，K 线图上价格是 1 个单位的价格

          + 每点价值：股指期货比较特殊，一般是 1 点 300 元；商品期货一般就是 1 点 1 元

        - 交易

          + 保证金率：可以稍微调大些，保证有一定回撤余地

          + 委托偏移：与模拟盘有关

          + 手续费：Cu --> 不收平今仓手续费；大部分是双向收手续费；Au --> 费率方式一般是固定 1 手 10 这样的方式收费

          + 滑点：一般用 '跳/手'， 一般最大不会超过 10 跳，5 跳就是比较大的波动

     2. 公式应用设置

        - 图表交易设定
          
          + 初始资金：如果设置的值比较小，可能会出现爆仓，因此一定要设置够

          + 允许连续建仓：如果策略需要连续建仓，这里要打开

          + 计算前 N 个较大资产回撤的平均值：因此测试报告中已经有了最大资产回撤，因此这边可以设置 5 左右，看看整体回撤情况

     3. 测试报告
        
        可以在工具 --> 测试报告里看到策略的性能测试报告，可以保存，保存格式为网页格式

     4. 滑点
        
        价格一般不大可能以当前价位成交，可能出现价格损耗，价格损耗的影响可以用滑点来表示，滑点损耗在测试报告中展示在手续费中。

        [[file:week5/huadian_01.png]]

        上图是不设滑点，应用双均线策略，测试报告中成交记录的某一单，买一手，卖一手，双向收费，手续费是每手 10 元，因此对应的
        佣金是 20 元。

        [[file:week5/huadian_02.png]]

        上图则是加上了滑点后佣金变化，滑点设为 2 跳，黄金 1 手 1000 克，1 跳对应 0.05 元，因此，每手对应的滑点是 100 元，
        买一手，卖一手，正好是 200 元，加上 20 元手续费，佣金变为 220 元。

     5. 测试报告解读

        - 净利润：总盈利 - 总亏损 (包含了手续费和滑点)

        - 交易手数：表示做了多少次交易，不是指买了或者卖了多少手合约

        - 盈利比率：盈利手数/交易手续

        - 平均利润：净利润/交易总手数

        - 平均盈利：总盈利/盈利手数

        - 平均亏损：总亏损/亏损手数

        - 平均盈利/平均亏损：体现了盈利的效率值 --> 凯利公式

        - 最大盈利：所有盈利的交易里，盈利最多的一笔交易盈利额

        - 最大亏损：所有亏损交易里，亏损最多的一笔交易亏损额

        - 最大盈利/总盈利：可以看到盈利的分布

        - 最大使用资金：Max（交易手数 x 保证金率 x 市值）

        - 收益率：净利润/初始资金

        - 有效收益率：净利润/最大使用资金

        - 收益曲线斜率：收益曲线终值与收益曲线初值的连线斜率

        - 收益曲线 R 平方值：

        - 夏普比率：

        - 收益风险比：年化收益/最大资产回撤 --> 回测报告中没有 --> /策略评估最重要的指标之一/

        - 调整的收益风险比：年化收益/平均资产回撤 --> 回测报告中没有 --> /策略评估重要指标之一/

        - 平均浮动盈亏：所有交易最大浮动盈利/最大浮动亏损

        - 建仓效率：(最佳平仓价-开仓价)/(最佳平仓价-最佳开仓价)

        - 平仓效率： (平仓价-最佳开仓价)/(最佳平仓价-最佳开仓价)

        - 总效率： (平仓价-开仓价)/(最佳平仓价-最佳开仓价)

          - 最佳平仓价：建仓后浮动盈利最大的价格

          - 最佳开仓价：建仓后浮动亏损最大的价格 --> 就是最差平仓价

* 优化
  
  1. 优化目标

  2. 优化参数

  3. 自动选参设置 --> 模板设置

     #+BEGIN_EXAMPLE
       Max(净利润, 0.3)
     #+END_EXAMPLE

     表示取净利润最大的前 30% 的参数。

     #+BEGIN_EXAMPLE
       Ptg(净利润, 0.3, 0.5)
     #+END_EXAMPLE
     
     表示净利润在 30% 到 50% 之间的一个范围。

  4. 加入队列 --> 批量优化

  5. 多品种优化

  6. 默认设置
     
     - 设定 --> 品种交易默认设定

     - 文件 --> 设置所有图表参数

* 模拟交易
  
  1. 可以同时运行多个公式
  2. 多品种同时交易 --> 每个品种单独设置
  3. 委托偏移 
     - 如果用指数(000 或 888)进行交易

       公式应用设置 --> 图表交易设定 --> 交易账户 (D0->主力合约)

     - 偏移 x 跳 --> 如果以心理价位进行交易可能不能成交，可以设置跳数，
       这样，每次发单都会偏移 x 跳进行发单，不一定会以委托的价格成交，
       按实际撮合交易价格为准，譬如，发单价格比委卖价高，那么交易所会
       以委卖价进行撮合成交。
* 发单价格偏移 

  1. 说明

     - 发单不准确是程序化交易者在刚开始学习编写模型时常犯的一个错误。

     - 发单价格不准确发生原因往往是因为发单价格和触发交易条件的价格不一样。
      
     - 偷价属于发单价格不准确的一部分，但是偷价和实盘交易没有关系，仅仅体现在测试报告中,
       在 If 语句中，如果逻辑判断条件和发单价格逻辑没有关联或者逻辑错误，可能造成发单
       价格不准确。

     - 在测试报告中看不出来，只能实盘模拟，比较交易记录才能看出问题发生在哪里。

     - 短线中高频的交易策略如果发生偷价，往往非常致命。

  2. 示例

     #+BEGIN_EXAMPLE
       MidLine = Average(Close, Length);
       Band = StandardDev(Close, Length, 2);
       UpBand = MidLine + Offset*Band;
       DownBand = Midline - Offset*Band;

       PlotNumeric("MidLine", MidLine);
       PlotNumeric("UpBand", UpBand);
       PlotNumeric("DownBand", DownBand);
     #+END_EXAMPLE

     1. 震荡反手开仓

        如果是在震荡势中，我们认为，当价格突破下轨后，很大概率后市价格会回到中轨，反之，当价格突破上轨后，
        价格会回落到中轨。

        下面的代码会出现偷价问题：

        #+BEGIN_EXAMPLE
        	  // 反手写法，突破上轨，开空单，突破下轨，开多单
        	  If(High > UpBand[1] And MarketPosition <> -1){
        		  SellShort(0, Close); // 最新价发单，close 既是收盘价，在当前 Bar 柱又是最新价
        	  }
        	  If(Low < DownBand[1] And MarketPosition <> 1){
        		  Buy(0, Close);
        	  }
        #+END_EXAMPLE

        [[file:week5/bolling_backhand.png]]
        
        在图中绿色箭头位置是模拟盘中实际应该发单价格，但是回测报告中，用的是收盘价，即红色箭头位置，这就造成了
        偷价格。

     2. 趋势突破平仓条件
        
        #+BEGIN_EXAMPLE
          // 持有多仓，且最低价突破中轨，以最新价平仓
          If(MarketPosition == 1 And Low < MidLine){
              Sell(0, Close);
          }

          // 持有空仓，且最高价突破中轨，以最新价平仓
          If(MarketPosition == -1 And High > MidLine)
          {
              BuyToCover(0, Close);
          }
        #+END_EXAMPLE

        上述代码同样会造成偷价问题。

        如果将上述代码改为与前一根 Bar 的价格比较

        #+BEGIN_EXAMPLE
          // 持有多仓，且最低价突破中轨，以最新价平仓
          If(MarketPosition == 1 And Low < MidLine[1]){
              Sell(0, MidLine[1]);
          }

          // 持有空仓，且最高价突破中轨，以最新价平仓
          If(MarketPosition == -1 And High > MidLine[1])
          {
              BuyToCover(0, MidLine[1]);
          }
        #+END_EXAMPLE

        同样会有问题，假如前一根 Bar 的 MidLine 价格是 10，我当前的 Low 是 9，那么满足 'Low < MidLine[1]' 了，
        此时，我以前一根 Bar 的 MidLine 价格试图卖出，回测中是可以卖的，但是，实盘中，Low 都已经小于 10 了，还以 10
        的加个挂卖单，很明显会卖不出去。

  3. 其他可能的偷价情况

     1. 跳空

        如果以当前 Bar 柱的价格作为条件判断分支语句，出现跳空的时候，很可能会出现偷价格问题。
* 信号闪烁
  
  1. 说明

     盘中模拟或者实盘交易的时候，有时候公式会遇到开平仓信号在最新 Bar 上时有时无的情况。这种情况我们称为
     信号闪烁，造成这种问题原因：
     
     当我们用 IF 分支语句作为交易动作的一个条件判断时，如果 IF 后面的 Bool 值和 High, Low, Close, Vol,
     Openint 等这些在盘中变化的值有关，那么就会很容易造成信号闪烁。

     最直接的解决办法：条件判断都用历史数据，不用盘中的实时数据。

  2. 查看信号闪烁方法

     跑模拟盘，看委托记录，注意查看价格

* 使用序列函数的注意事项
  
  1. 说明

     - TBL 的计算机制：对于用 AND 连接的 BOOL 值，依次连接连接项的值，如果判断到 FALSE， 
       如果判断到 FALSE, 那么直接返回 FALSE, 不再计算后面连接项的值。

     - 什么是序列函数

       类似与序列变量，该函数是可以回溯的，需要在历史 BAR 上保存相应的值。

       - e.g. BarCount 返回当前公式应用在指定图层上的 Bar 总数；CurrentBar 返回当前公式应用在指定
         图层上的当前 Bar 的索引值。

  2. 一个容易出错的地方举例

     #+BEGIN_EXAMPLE
       Vars
         BoolSeries Condition1;
         BoolSeries Condition2;

         NumericSeries MacdDiff(0);
         NumericSeries MacdValue(0);
         NumericSeries AvgMacd(0);

         BoolSeries Cond1;

       Begin

         MacdValue = XAverage(Close, FastLength) - XAverage(Close, SlowLength);
         AvgMacd = XAverage(MacdValue, MacdLength);
         MacdDiff = MacdValue - AvgMacd;

         Condition1 = MacdDiff[1] > 0 And CrossOver(MacdValue[1], AvgMacd[1]);
         Condition2 = CrossOver(MacdValue[1], AvgMacd[1]) And MacdDiff[1] > 0;

         PlotBool("Condition1", Condition1, Low);
         PlotBool("Condition2", Condition2, High);
     #+END_EXAMPLE

     逻辑上而言， 'Condition1' 应该与 'Condition2' 的值一样，但是会有差别，原因在于 =CrossOver= 这个函数是
     返回值是 BoolSeries, 又因为 TB 默认两个 Bool 类型连接时，第一项是 False，第二项不会再计算，直接返回 False，
     这会碰到一种情况，某连续两根 Bar，第一根 Bar 满足 MacdDiff[1] > 0, 但是 CrossOver(MacdValue[1], AvgMacd[1]) 是 False,
     第二根 Bar 时 MacdDiff[1] > 0 是 False，则直接返回 False, 此时，语句 CrossOver(MacdValue[1], AvgMacd[1]) 不会
     运行，则尽管此时实际情况是 CrossOver(MacdValue[1], AvgMacd[1]) 为 True，但因为这个语句没有运行，则默认
     其结果是 False，这样，到了第三根 Bar，如果两个条件都是 True 的话，那么 Condition2 返回是 True，而 Conditon1
     的结果却是 False.

  3. 另一个示例

     假如当前 K 线图由 300 根 K 线，我想要在每根 K 线上打印出当前 Bar 柱的索引，只需要用 'CurrentBar' 即可，但是，假如我采用
     下面语句

     #+BEGIN_EXAMPLE
       If(BarStatus == 2)
       {
         Commentary("BarCount[1] = ", Text(BarCount[1]));
         Commentary("BarCount = ", Text(BarCount));
         Commentary("CurrentBar[1] = ", Text(CurrentBar[1]));
         Commentary("CurrentBar = ", Text(CurrentBar));
       }
     #+END_EXAMPLE

     显示的结果分别是 301，301，300，300， 原因在于， =BarCount= 是数值类型变量，就是一个内存地址保存的值，因此，用不用索引，
     其值都是一样的，但是，对于 =CurrentBar= ，它是序列型变量，由于加入了条件判断语句，在之前的 K 线上，该函数并不会运行，因此，
     我们要索引前一根 K 线的索引值，只能用当前 K 线的索引值来作为前一根K线的索引值。
